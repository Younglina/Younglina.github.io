import{_ as s,o as n,c as a,h as e}from"./app.f8544706.js";const g=JSON.parse('{"title":"vitepress配置评论(gitalk)","description":"","frontmatter":{"date":"2022-09-19","title":"vitepress配置评论(gitalk)","author":"Younglina","categories":["文档"],"tags":["记录","vitepress"]},"headers":[{"level":2,"title":"创建GitHub Application","slug":"创建github-application","link":"#创建github-application","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"relativePath":"write/docs/vitepress-gitalk.md","lastUpdated":1664376729000}'),l={name:"write/docs/vitepress-gitalk.md"},p=e(`<p>因为VitePress没有像VuePress那样的可以直接安装配置的评论插件，所以就需要自己动手，这里使用gitalk作为插件使用。</p><h2 id="创建github-application" tabindex="-1">创建GitHub Application <a class="header-anchor" href="#创建github-application" aria-hidden="true">#</a></h2><p>使用gitalk之前，得先创建<a href="https://github.com/settings/applications/new" target="_blank" rel="noreferrer">GitHub Application</a>，为了后续提供给gitalk的两个数据， <code>Client ID</code>和<code>Client secrets</code>，如下图</p><p><img src="https://raw.githubusercontent.com/Younglina/images/master/20220922100451.png" alt=""> 本地调试的时候，修改<code>callback url</code>为本地服务的链接</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><p>两种方式</p><p>直接引入</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;!-- or --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>npm 安装</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">npm i --save gitalk</span></span>
<span class="line"><span style="color:#A6ACCD;">import &#39;gitalk/dist/gitalk.css&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">import Gitalk from &#39;gitalk&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第一种方式在vitepress中不是太好使，使用第二种方式，在需要使用的地方导入即可，一般是自定义的首页组件里面，和所有的文章下面</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h2><p>想要在所有文章下面使用，又不想每个文章里面都写一遍咋办？这里就需要我们去改一下vitepress的配置，自定义一下文章页面的主题。</p><p>在<code>.vitepress</code>下面新建一个<code>theme</code>的文件夹，创建两个文件<code>index.js</code>和<code>MyLayout.vue</code>，这个layout文件就是我们包装每个文章页面的根组件，</p><p><strong>导入之前安装的gitalk</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;!--.vitepress/theme/MyLayout.vue--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script setup&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import &#39;gitalk/dist/gitalk.css&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">import Gitalk from &#39;gitalk&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>生成gitalk插件</strong><br> 需要注意的是，vitepress在编译的时候无法使用<code>window</code>（不知道说的对不对），而gitalk是依赖window.document去加载节点的， 而且在setup中可能还获取不到需要挂载的节点，所以得在<code>onMounted</code>以后去处理，然后判断<code>window</code>是否可用。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;script setup&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import { onMounted } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">import &#39;gitalk/dist/gitalk.css&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">import Gitalk from &#39;gitalk&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">onMounted(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">  if(typeof window !==undefined){</span></span>
<span class="line"><span style="color:#A6ACCD;">    var s_div = document.createElement(&#39;div&#39;);   // 创建节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    s_div.setAttribute(&quot;id&quot;, &quot;gitalk-page-container&quot;);   // 设置id</span></span>
<span class="line"><span style="color:#A6ACCD;">    document.querySelector(&#39;.content-container&#39;).appendChild(s_div);   // querySelector的节点可自己根据自己想加载的地方设置</span></span>
<span class="line"><span style="color:#A6ACCD;">    var gitment = new Gitalk({</span></span>
<span class="line"><span style="color:#A6ACCD;">      id: location.pathname, // 可选。默认为 location.href</span></span>
<span class="line"><span style="color:#A6ACCD;">      owner: &#39;Younglina&#39;, // GitHub repository 所有者</span></span>
<span class="line"><span style="color:#A6ACCD;">      repo: &#39;Younglina.github.io&#39;, // GitHub repository</span></span>
<span class="line"><span style="color:#A6ACCD;">      clientID: &#39;******&#39;, // 自己的clientID</span></span>
<span class="line"><span style="color:#A6ACCD;">      clientSecret: &#39;******&#39;,// 自己的clientSecret</span></span>
<span class="line"><span style="color:#A6ACCD;">      admin: [&#39;Younglina&#39;], // GitHub repository 所有者</span></span>
<span class="line"><span style="color:#A6ACCD;">      labels: [&#39;Gitalk&#39;], // GitHub issue 的标签</span></span>
<span class="line"><span style="color:#A6ACCD;">      createIssueManually: true, //如果当前页面没有相应的 isssue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    gitment.render(&#39;gitalk-page-container&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>按理说在完成上述操作以后，gitalk就能正常使用了，但是发现github获取token的接口被墙了，导致出现<code>network error</code>而无法使用</p><p>去gitalk的git上一看，很多人都有这样的问题，随后在网上一番搜索，找到了一个亲测有效的方法</p><p>参考<a href="https://prohibitorum.top/7cc2c97a15b4.html" target="_blank" rel="noreferrer">文章</a>，就是需要我们自己去搭一个nodejs的服务进行代理，不愿看的或者没有域名的同学们，可以直接使用我按照文章方法设置的。</p><p>在gitalk的配置中加入下面一句即可</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">proxy: &quot;https://cors-server-ecru.vercel.app/github_access_token&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>成功以后的<a href="https://younglina.top/" target="_blank" rel="noreferrer">效果</a><img src="https://raw.githubusercontent.com/Younglina/images/master/20220922104514.png" alt=""></p>`,24),t=[p];function i(r,c,o,u,d,b){return n(),a("div",null,t)}const C=s(l,[["render",i]]);export{g as __pageData,C as default};
